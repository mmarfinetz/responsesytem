# Security Scanning Pipeline for Plumbing AI Platform
name: Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: plumbing-ai/backend
  IMAGE_NAME_FRONTEND: plumbing-ai/frontend

jobs:
  # Static Application Security Testing (SAST)
  sast-scan:
    name: Static Application Security Testing
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # CodeQL Analysis
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: javascript, typescript
        config-file: ./.github/codeql/codeql-config.yml

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies (Backend)
      working-directory: ./backend
      run: npm ci

    - name: Install dependencies (Frontend)
      working-directory: ./frontend
      run: npm ci

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: "/language:javascript"

    # Semgrep SAST
    - name: Run Semgrep Security Scan
      uses: semgrep/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/owasp-top-ten
          p/javascript
          p/typescript
          p/nodejs
          p/react
        generateSarif: "1"
      env:
        SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

    - name: Upload Semgrep results to GitHub Security
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: semgrep.sarif

    # ESLint Security Plugin
    - name: Run ESLint Security Scan (Backend)
      working-directory: ./backend
      run: |
        npm install eslint-plugin-security --save-dev
        npx eslint src --ext .ts --format @microsoft/sarif --output-file eslint-backend-results.sarif
      continue-on-error: true

    - name: Run ESLint Security Scan (Frontend)
      working-directory: ./frontend
      run: |
        npm install eslint-plugin-security --save-dev
        npx eslint src --ext .ts,.tsx --format @microsoft/sarif --output-file eslint-frontend-results.sarif
      continue-on-error: true

    - name: Upload ESLint results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: |
          backend/eslint-backend-results.sarif
          frontend/eslint-frontend-results.sarif

  # Dependency Vulnerability Scanning
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    # NPM Audit
    - name: Run NPM Audit (Backend)
      working-directory: ./backend
      run: |
        npm audit --audit-level=moderate --json > npm-audit-backend.json || true
        
    - name: Run NPM Audit (Frontend)
      working-directory: ./frontend
      run: |
        npm audit --audit-level=moderate --json > npm-audit-frontend.json || true

    # Snyk Vulnerability Scan
    - name: Run Snyk Security Scan (Backend)
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=medium --file=backend/package.json
        command: test
      continue-on-error: true

    - name: Run Snyk Security Scan (Frontend)
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=medium --file=frontend/package.json
        command: test
      continue-on-error: true

    # OWASP Dependency Check
    - name: Run OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'plumbing-ai-platform'
        path: '.'
        format: 'SARIF'
        args: >
          --enableRetired
          --enableExperimental
          --nodeAuditSkipDevDependencies

    - name: Upload OWASP Dependency Check results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: reports/dependency-check-report.sarif

    # License Compliance Check
    - name: Check License Compliance
      run: |
        npx license-checker --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;0BSD' --production --excludePrivatePackages --summary
      working-directory: ./backend
      continue-on-error: true

  # Container Security Scanning
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    permissions:
      security-events: write
      contents: read
      packages: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build Backend Image for Scanning
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: false
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:scan
        load: true

    - name: Build Frontend Image for Scanning
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: false
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:scan
        load: true

    # Trivy Container Scanning
    - name: Run Trivy vulnerability scanner (Backend)
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:scan
        format: 'sarif'
        output: 'trivy-backend-results.sarif'

    - name: Run Trivy vulnerability scanner (Frontend)
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:scan
        format: 'sarif'
        output: 'trivy-frontend-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: |
          trivy-backend-results.sarif
          trivy-frontend-results.sarif

    # Grype Container Scanning
    - name: Run Grype vulnerability scanner (Backend)
      uses: anchore/scan-action@v3
      with:
        image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:scan
        format: sarif
        output-file: grype-backend-results.sarif
        fail-build: false

    - name: Run Grype vulnerability scanner (Frontend)
      uses: anchore/scan-action@v3
      with:
        image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:scan
        format: sarif
        output-file: grype-frontend-results.sarif
        fail-build: false

    - name: Upload Grype scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: |
          grype-backend-results.sarif
          grype-frontend-results.sarif

    # Docker Bench Security
    - name: Run Docker Bench Security
      run: |
        docker run --rm --net host --pid host --userns host --cap-add audit_control \
          -e DOCKER_CONTENT_TRUST=$DOCKER_CONTENT_TRUST \
          -v /etc:/etc:ro \
          -v /usr/bin/containerd:/usr/bin/containerd:ro \
          -v /usr/bin/runc:/usr/bin/runc:ro \
          -v /usr/lib/systemd:/usr/lib/systemd:ro \
          -v /var/lib:/var/lib:ro \
          -v /var/run/docker.sock:/var/run/docker.sock:ro \
          --label docker_bench_security \
          docker/docker-bench-security > docker-bench-results.txt || true

    - name: Upload Docker Bench results
      uses: actions/upload-artifact@v3
      with:
        name: docker-bench-results
        path: docker-bench-results.txt

  # Infrastructure Security Scanning
  infrastructure-scan:
    name: Infrastructure Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # Terraform Security Scanning
    - name: Run tfsec (Terraform Security Scanner)
      uses: aquasecurity/tfsec-action@v1.0.3
      with:
        working_directory: terraform/
        format: sarif
        output_file: tfsec-results.sarif

    - name: Upload tfsec results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: tfsec-results.sarif

    # Checkov Infrastructure Scanning
    - name: Run Checkov (Infrastructure Security)
      uses: bridgecrewio/checkov-action@master
      with:
        directory: .
        framework: terraform,kubernetes,dockerfile
        output_format: sarif
        output_file_path: checkov-results.sarif

    - name: Upload Checkov results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: checkov-results.sarif

    # Kubernetes Security Scanning
    - name: Run Kubesec Kubernetes Security Scan
      run: |
        wget https://github.com/controlplaneio/kubesec/releases/latest/download/kubesec_linux_amd64.tar.gz
        tar -xvf kubesec_linux_amd64.tar.gz
        chmod +x kubesec
        
        # Scan all Kubernetes manifests
        find k8s/ -name "*.yaml" -exec ./kubesec scan {} \; > kubesec-results.json || true

    - name: Upload Kubesec results
      uses: actions/upload-artifact@v3
      with:
        name: kubesec-results
        path: kubesec-results.json

    # Polaris Kubernetes Best Practices
    - name: Run Polaris Kubernetes Best Practices Scan
      run: |
        wget https://github.com/FairwindsOps/polaris/releases/latest/download/polaris_linux_amd64.tar.gz
        tar -xzf polaris_linux_amd64.tar.gz
        chmod +x polaris
        
        # Run Polaris audit
        ./polaris audit --audit-path k8s/ --format json > polaris-results.json || true

    - name: Upload Polaris results
      uses: actions/upload-artifact@v3
      with:
        name: polaris-results
        path: polaris-results.json

  # Secret Scanning
  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # TruffleHog Secret Scanning
    - name: Run TruffleHog Secret Scan
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

    # GitLeaks Secret Scanning
    - name: Run GitLeaks Secret Scan
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Security Policy Compliance
  policy-compliance:
    name: Security Policy Compliance
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # Open Policy Agent (OPA) Compliance
    - name: Install OPA
      run: |
        curl -L -o opa https://openpolicyagent.org/downloads/v0.58.0/opa_linux_amd64_static
        chmod 755 ./opa

    - name: Run OPA Security Policy Tests
      run: |
        # Test Kubernetes policies
        ./opa test security/policies/ || true
        
        # Evaluate Kubernetes manifests against policies
        find k8s/ -name "*.yaml" -exec ./opa eval -d security/policies/ -i {} "data.kubernetes.deny" \; || true

    # CIS Benchmark Compliance Check
    - name: Check CIS Benchmark Compliance
      run: |
        echo "Checking CIS Benchmark compliance for Kubernetes and Docker configurations..."
        
        # Basic checks for Kubernetes manifests
        echo "Security Context Checks:"
        grep -r "runAsNonRoot" k8s/ || echo "Warning: Not all containers run as non-root"
        grep -r "allowPrivilegeEscalation: false" k8s/ || echo "Warning: Privilege escalation not explicitly disabled"
        grep -r "readOnlyRootFilesystem: true" k8s/ || echo "Warning: Root filesystem not set to read-only"

  # Security Report Generation
  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [sast-scan, dependency-scan, container-scan, infrastructure-scan, secret-scan, policy-compliance]
    if: always()
    permissions:
      contents: read
      issues: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v3

    - name: Generate Security Report
      run: |
        cat > security-report.md << 'EOF'
        # Security Scan Report
        
        **Date:** $(date)
        **Commit:** ${{ github.sha }}
        **Branch:** ${{ github.ref_name }}
        
        ## Summary
        
        This report summarizes the security scanning results for the Plumbing AI Platform.
        
        ## Scan Results
        
        ### Static Application Security Testing (SAST)
        - CodeQL: ${{ needs.sast-scan.result }}
        - Semgrep: ${{ needs.sast-scan.result }}
        - ESLint Security: ${{ needs.sast-scan.result }}
        
        ### Dependency Scanning
        - NPM Audit: ${{ needs.dependency-scan.result }}
        - Snyk: ${{ needs.dependency-scan.result }}
        - OWASP Dependency Check: ${{ needs.dependency-scan.result }}
        
        ### Container Security
        - Trivy: ${{ needs.container-scan.result }}
        - Grype: ${{ needs.container-scan.result }}
        - Docker Bench: ${{ needs.container-scan.result }}
        
        ### Infrastructure Security
        - tfsec: ${{ needs.infrastructure-scan.result }}
        - Checkov: ${{ needs.infrastructure-scan.result }}
        - Kubesec: ${{ needs.infrastructure-scan.result }}
        - Polaris: ${{ needs.infrastructure-scan.result }}
        
        ### Secret Scanning
        - TruffleHog: ${{ needs.secret-scan.result }}
        - GitLeaks: ${{ needs.secret-scan.result }}
        
        ### Policy Compliance
        - OPA Policies: ${{ needs.policy-compliance.result }}
        - CIS Benchmark: ${{ needs.policy-compliance.result }}
        
        ## Recommendations
        
        1. Review all findings in the GitHub Security tab
        2. Address critical and high severity vulnerabilities first
        3. Update dependencies with known vulnerabilities
        4. Fix any secret leaks immediately
        5. Ensure all containers run with security hardening
        
        ## Next Steps
        
        - Monitor security alerts in GitHub
        - Schedule regular security reviews
        - Update security policies as needed
        - Train team on secure coding practices
        EOF

    - name: Create Security Issue (if failures)
      if: contains(needs.*.result, 'failure')
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('security-report.md', 'utf8');
          
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Security Scan Failures - ${context.sha.substring(0, 7)}`,
            body: `${report}\n\n**Action Required:** Please review and address the security findings.`,
            labels: ['security', 'high-priority']
          });

    - name: Upload Security Report
      uses: actions/upload-artifact@v3
      with:
        name: security-report
        path: security-report.md